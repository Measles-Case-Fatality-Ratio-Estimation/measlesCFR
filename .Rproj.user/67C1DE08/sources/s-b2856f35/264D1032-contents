#' Create Input Data Fame
#'
#' @description Some description here.
#'
#' @param df_historic Historic data frame. Optional.
#' @param df_projection Projection data frame. Optional.
#' @param historic_include Whether to include historic inputs. Boolean value (TRUE/FALSE)
#' @param projection_include Whether to include projection data. Boolean value (TRUE/FALSE)
#' @param start_year Optional. Need to provide if user supplies historicDF/projectionDF.
#' @param end_year Optional. Need to provide if user supplies historicDF/projectionDF.
#'
#' @return input data frame that is long by year and wide by covariates.
#'
#' @import data.table
#'
#' @export
#'
#' @examples
createInputDF <- function(df_historic, df_projection,
                          historic_include, projection_include,
                          start_year, end_year) {
  ## ----------------------------------------------------------------------------------------------
  ## content for createInputDF()
  ## ----------------------------------------------------------------------------------------------

  # optional arguments: historicDF, projectionDF

    historic_include=T
    projection_include=F
    country_iso3 = "ETH"

    if(historic_include == T & !exists('historicDF')){
      historicDF <- fread(paste0('/share/geospatial/measles/cfr/model_versions/01c_covariate_prep_incidence_covariate/','2022_09_02_v2020_FOR_PACKAGE','/transformed_standardized_covaraite_set_with_incidence.csv'))
      historicDF <- subset(historicDF, country == country_iso3)
    }
    if(projection_include == T & !exists('projectionDF')){
      projectionDF <- fread(paste0('/share/geospatial/measles/cfr/model_versions/01c_covariate_prep_incidence_covariate/','2022_09_02_v2020_FOR_PACKAGE','/transformed_standardized_covaraite_set_with_incidence_PROJECTIONS.csv'))
      projectionDF <- subset(projectionDF, country == country_iso3)
    }

    inputDF <- data.frame()
    if(historic_include == T){
      inputDF <- rbind(inputDF, historicDF)
    }
    if(projection_include == T){
      inputDF <- rbind(inputDF, projectionDF)
    }

  return(inputDF)
}
