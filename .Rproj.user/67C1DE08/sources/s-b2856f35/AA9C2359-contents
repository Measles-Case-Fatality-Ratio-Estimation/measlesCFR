#' Predict Case Fatality Rate of Measles
#'
#' @description Some description here.
#'
#' @param inputDF Dataframe of inputs.
#' @param vaccination_scenario Vaccination scenario.
#' @param age_start Age start.
#' @param age_end Age end.
#' @param year_start Year start.
#' @param year_end Year end.
#' @param community_indicator Community indicator.
#' @param country ISO 3166 country code.
#' @param get_draws A Boolean value (TRUE/FALSE)
#' @param upper_bound Upper bound.
#' @param lower_bound Lower bound.
#'
#' @return A predictDF that is long by age and year
#'
#' @import data.table
#' @import tidyverse
#' @import msm
#' @import arm
#' @import reticulate
#' @import stats
#' @export
#'
#' @examples
predictCFR <- function(inputDF, vaccination_scenario = 'baseline', age_start = 0,
                       age_end = 34, year_start = 1990, year_end = 2019, community_indicator = 1,
                       country, get_draws = F, upper_bound = 0.975, lower_bound = 0.025) {

  ## ----------------------------------------------------------------------------------------------
  ## content for predictCFR()
  ## ----------------------------------------------------------------------------------------------

  library(mrbrt002, lib.loc = "/ihme/code/mscm/Rv4/packages")

  setDTthreads(1)
  country_iso3 <- country


  # -----------------------------------------------------------------------------------------------
  # read covariates for prediction frame ----------------------------------------------------------
  if(vaccination_scenario == "baseline"){
    covariates <- fread(paste0('/share/geospatial/measles/cfr/model_versions/01c_covariate_prep_incidence_covariate/','2022_09_02_v2020_FOR_PACKAGE','/transformed_standardized_covaraite_set_with_incidence.csv'))
  }else if(vaccination_scenario == "no_vaccination"){
    covariates <- fread(paste0('/share/geospatial/measles/cfr/model_versions/01d_covariate_prep_incidence_covariate_no_vax_scenario/','2022_10_21_v2020_FOR_PACKAGE','/transformed_standardized_covaraite_set_with_incidence_no_vax.csv'))
  }

  pred_frame <- subset(covariates, country == country_iso3 & year >= year_start & year <= year_end)
  ## pred_frame <- subset(covariates)

  # -----------------------------------------------------------------------------------------------
  # prepare prediction frame ----------------------------------------------------------------------
  pred_frame$Comm.ind <- community_indicator

  pred_frame2 <- cbind(pred_frame, i = rep(age_start:age_end, each = nrow(pred_frame)))
  pred_frame2$age_start <- pred_frame2$i
  pred_frame2$age_end <- pred_frame2$i

  # -----------------------------------------------------------------------------------------------
  # make MR-BRT prediction object -----------------------------------------------------------------
  data_pred <- MRData()
  data_pred$load_df(data=pred_frame2,
                    col_covs=list( "incidence_standardized",
                                   "maternal_education_standardized",
                                   "age_start",
                                   "age_end",
                                   "Comm.ind",
                                   "mcv1_standardized",
                                   "u5mr_standardized",
                                   "prop_urban_standardized",
                                   "vitA_standardized"))

  # -----------------------------------------------------------------------------------------------
  # load MR-BRT model object and samples ----------------------------------------------------------
  load(file = paste0('/share/geospatial/measles/cfr/model_versions/02c_second_step_full_model/', '2022_10_21_v2020_3knots_constant_FE_priors_FOR_PACKAGE','/mrbrt_samples.RData'))
  mod_cfr <- py_load_object(filename = paste0('/share/geospatial/measles/cfr/model_versions/02c_second_step_full_model/','2022_10_21_v2020_3knots_constant_FE_priors_FOR_PACKAGE','/mrbrt_mod_cfr_object.pkl'), pickle = "dill")

  # -----------------------------------------------------------------------------------------------
  # get point predictions from fixed effects ------------------------------------------------------
  data_pred$predictions <- mod_cfr$predict(data=data_pred, predict_for_study = F)
  pred_frame2$mod_cfr <- invlogit(data_pred$predictions)

  # -----------------------------------------------------------------------------------------------
  # create draws and uncertainty ------------------------------------------------------------------
  draws <- mod_cfr$create_draws(
    data = data_pred,
    beta_samples = samples1[[1]],
    gamma_samples = samples1[[2]],
    random_study = FALSE
  )

  draws2 <- invlogit(draws)
  draws2 <- data.table(draws2)

  pred_frame2 <- as.data.table(pred_frame2)
  pred_frame2[, `:=` (
    lower = apply(draws2, 1, function(x) quantile(x, lower_bound)),
    median = apply(draws2, 1, function(x) quantile(x, 0.5)),
    upper = apply(draws2, 1, function(x) quantile(x, upper_bound))
  )]

  draws2$country <- pred_frame2$country
  draws2$year <- pred_frame2$year
  draws2$age <- pred_frame2$age_start
  draws2$Comm.ind <- pred_frame2$Comm.ind
  draws2$predicted_cfr <- pred_frame2$mod_cfr
  draws2$predicted_cfr_ub <- pred_frame2$upper
  draws2$predicted_cfr_lb <- pred_frame2$lower
  draws2$care_setting <- ifelse(pred_frame2$Comm.ind == 1, "community", "hospital")

  pred_frame2$predicted_cfr <- pred_frame2$mod_cfr
  pred_frame2$predicted_cfr_ub <- pred_frame2$upper
  pred_frame2$predicted_cfr_lb <- pred_frame2$lower

  pred_frame2$care_setting <- ifelse(pred_frame2$Comm.ind == 1, "community", "hospital")
  pred_frame2$age <- pred_frame2$age_start

  # -----------------------------------------------------------------------------------------------
  # to be returned --------------------------------------------------------------------------
  pred_frame2 <- subset(pred_frame2, select=c('country','age','year','care_setting','predicted_cfr', 'predicted_cfr_lb', 'predicted_cfr_ub'))

  draw_cols <- names(draws2)[grepl("V[0-9]*", names(draws2))]
  draws2 <- subset(draws2, select=c('country','age','year','care_setting','predicted_cfr', 'predicted_cfr_lb', 'predicted_cfr_ub', draw_cols))

  if (get_draws == T) {
    return(draws2)
  } else {
    return(pred_frame2)
  }
}
